@mixin component-button {
  .pl-button {
    @include transition-all;
    cursor: pointer;
    user-select: none;
    min-width: 65px;
    margin: 0;

    .pl-box-content {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    &:active {
      position: relative;
      top: 1px;
      left: 1px;
    }

    &.pl-box-type-fill {
      box-shadow: 1px 1px 2px 0 #999;
      @include pl-colors(pl-box) {
        &:active {
          background-color: $pl-color-deep;
          border-color: $pl-color-deep;

          &.pl-box-disabled {
            background-color: $p-color-normal-disabled;
            border-color: $p-color-normal-disabled;
          }
        }

        &.pl-button-active {
          background-color: $pl-color-deep;
          border-color: $pl-color-deep;
        }
      }
    }

    &.pl-box-type-line, &.pl-box-type-none, &.pl-box-type-dashed {
      @each $key, $value in $list-color {
        &.pl-box-color-#{$key} {
          &:active {
            background-color: map_get($list-color-light, $key);

            &.pl-box-disabled {
              background-color: transparent;
            }
          }

          &.pl-button-active {
            background-color: map_get($list-color-light, $key);
          }
        }
      }
    }

    &.pl-box-disabled, &.pl-box-readonly {
      position: unset;
      top: unset;
      left: unset;
    }
  }

  .pl-button-group {
    @include public-style;
    display: inline-flex;
    box-sizing: border-box;
    &.pl-button-group-vertical {
      flex-direction: column;
      /*shape*/
      .pl-button {
        border-radius: 0;
        &:not(:first-child) {
          border-top-color: transparent;
        }
        &.pl-box-type-fill {
          @each $key, $value in $list-color {
            &.pl-box-color-#{$key}:not(:last-child) {
              border-bottom-color: map_get($list-color-light,$key);
            }
          }
        }
      }

      @each $key, $value in $list-shape {
        &.pl-button-group-shape-#{$key} {
          .pl-button:first-child {
            border-top-left-radius: $value;
            border-top-right-radius: $value;
          }
          .pl-button:last-child {
            border-bottom-left-radius: $value;
            border-bottom-right-radius: $value;
          }
        }
      }
    }
    &.pl-button-group-horizontal {
      flex-direction: row;
      .pl-button {
        border-radius: 0;
        &:not(:first-child) {
          border-left-color: transparent;
        }

        &.pl-box-type-fill {
          @each $key, $value in $list-color {
            &.pl-box-color-#{$key}:not(:last-child) {
              border-right-color: map_get($list-color-light,$key);
            }
          }
        }
      }
      /*shape*/
      @each $key, $value in $list-shape {
        &.pl-button-group-shape-#{$key} {
          .pl-button:first-child {
            border-top-left-radius: $value;
            border-bottom-left-radius: $value;
          }
          .pl-button:last-child {
            border-top-right-radius: $value;
            border-bottom-right-radius: $value;
          }
        }
      }
    }
  }
}